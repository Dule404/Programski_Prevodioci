
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Wed Dec 14 19:52:36 CET 2022
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;

/** CUP v0.10k generated parser.
  * @version Wed Dec 14 19:52:36 CET 2022
  */
public class MPParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MPParser() {super();}

  /** Constructor which sets the default scanner. */
  public MPParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\044\000\002\002\004\000\002\003\006\000\002\004" +
    "\006\000\002\005\004\000\002\005\003\000\002\007\005" +
    "\000\002\011\003\000\002\011\005\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\006\004\000\002\006\003\000\002\012\003\000\002\012" +
    "\006\000\002\012\003\000\002\013\017\000\002\014\005" +
    "\000\002\014\003\000\002\015\005\000\002\015\003\000" +
    "\002\016\005\000\002\016\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\103\000\004\004\005\001\002\000\004\002\105\001" +
    "\002\000\004\030\006\001\002\000\004\031\007\001\002" +
    "\000\004\033\011\001\002\000\004\002\000\001\002\000" +
    "\012\005\020\006\016\007\017\010\014\001\002\000\004" +
    "\024\100\001\002\000\020\005\ufffd\006\ufffd\007\ufffd\010" +
    "\ufffd\011\ufffd\024\ufffd\033\ufffd\001\002\000\004\024\ufff6" +
    "\001\002\000\020\005\020\006\016\007\017\010\014\011" +
    "\023\024\026\033\011\001\002\000\004\024\ufff8\001\002" +
    "\000\004\024\ufff7\001\002\000\004\024\ufff9\001\002\000" +
    "\014\011\ufff1\012\ufff1\024\ufff1\033\ufff1\034\ufff1\001\002" +
    "\000\012\011\023\024\026\033\011\034\077\001\002\000" +
    "\004\030\062\001\002\000\020\005\ufffe\006\ufffe\007\ufffe" +
    "\010\ufffe\011\ufffe\024\ufffe\033\ufffe\001\002\000\012\011" +
    "\ufff4\024\ufff4\033\ufff4\034\ufff4\001\002\000\004\036\030" +
    "\001\002\000\014\011\ufff3\012\ufff3\024\ufff3\033\ufff3\034" +
    "\ufff3\001\002\000\016\020\035\021\042\022\031\023\034" +
    "\024\040\030\036\001\002\000\026\013\uffe0\014\uffe0\015" +
    "\uffe0\016\uffe0\017\uffe0\025\uffe0\026\uffe0\027\uffe0\031\uffe0" +
    "\032\uffe0\001\002\000\012\013\uffee\014\057\031\uffee\032" +
    "\uffee\001\002\000\006\013\055\032\061\001\002\000\026" +
    "\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\025\uffe1\026" +
    "\uffe1\027\uffe1\031\uffe1\032\uffe1\001\002\000\026\013\uffdf" +
    "\014\uffdf\015\uffdf\016\uffdf\017\uffdf\025\uffdf\026\uffdf\027" +
    "\uffdf\031\uffdf\032\uffdf\001\002\000\016\020\035\021\042" +
    "\022\031\023\034\024\040\030\036\001\002\000\026\013" +
    "\uffea\014\uffea\015\047\016\044\017\050\025\051\026\046" +
    "\027\045\031\uffea\032\uffea\001\002\000\026\013\uffe3\014" +
    "\uffe3\015\uffe3\016\uffe3\017\uffe3\025\uffe3\026\uffe3\027\uffe3" +
    "\031\uffe3\032\uffe3\001\002\000\012\013\uffec\014\uffec\031" +
    "\uffec\032\uffec\001\002\000\026\013\uffe2\014\uffe2\015\uffe2" +
    "\016\uffe2\017\uffe2\025\uffe2\026\uffe2\027\uffe2\031\uffe2\032" +
    "\uffe2\001\002\000\016\020\035\021\042\022\031\023\034" +
    "\024\040\030\036\001\002\000\016\020\uffe8\021\uffe8\022" +
    "\uffe8\023\uffe8\024\uffe8\030\uffe8\001\002\000\016\020\uffe4" +
    "\021\uffe4\022\uffe4\023\uffe4\024\uffe4\030\uffe4\001\002\000" +
    "\016\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\030\uffe5" +
    "\001\002\000\016\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024" +
    "\uffe9\030\uffe9\001\002\000\016\020\uffe7\021\uffe7\022\uffe7" +
    "\023\uffe7\024\uffe7\030\uffe7\001\002\000\016\020\uffe6\021" +
    "\uffe6\022\uffe6\023\uffe6\024\uffe6\030\uffe6\001\002\000\012" +
    "\013\uffeb\014\uffeb\031\uffeb\032\uffeb\001\002\000\006\013" +
    "\055\031\054\001\002\000\026\013\uffde\014\uffde\015\uffde" +
    "\016\uffde\017\uffde\025\uffde\026\uffde\027\uffde\031\uffde\032" +
    "\uffde\001\002\000\016\020\035\021\042\022\031\023\034" +
    "\024\040\030\036\001\002\000\012\013\uffef\014\057\031" +
    "\uffef\032\uffef\001\002\000\016\020\035\021\042\022\031" +
    "\023\034\024\040\030\036\001\002\000\012\013\uffed\014" +
    "\uffed\031\uffed\032\uffed\001\002\000\014\011\ufff2\012\ufff2" +
    "\024\ufff2\033\ufff2\034\ufff2\001\002\000\016\020\035\021" +
    "\042\022\031\023\034\024\040\030\036\001\002\000\006" +
    "\013\055\031\064\001\002\000\004\033\065\001\002\000" +
    "\010\011\023\024\026\033\011\001\002\000\004\012\067" +
    "\001\002\000\004\030\070\001\002\000\016\020\035\021" +
    "\042\022\031\023\034\024\040\030\036\001\002\000\006" +
    "\013\055\031\072\001\002\000\004\032\073\001\002\000" +
    "\010\011\023\024\026\033\011\001\002\000\004\033\075" +
    "\001\002\000\014\011\ufff0\012\ufff0\024\ufff0\033\ufff0\034" +
    "\ufff0\001\002\000\012\011\ufff5\024\ufff5\033\ufff5\034\ufff5" +
    "\001\002\000\016\002\uffff\011\uffff\012\uffff\024\uffff\033" +
    "\uffff\034\uffff\001\002\000\006\032\ufffb\035\ufffb\001\002" +
    "\000\006\032\103\035\102\001\002\000\004\024\104\001" +
    "\002\000\020\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc" +
    "\024\ufffc\033\ufffc\001\002\000\006\032\ufffa\035\ufffa\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\103\000\004\003\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\007\001\001" +
    "\000\002\001\001\000\010\005\014\007\012\010\011\001" +
    "\001\000\004\011\100\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\004\020\006\021\007\023\010\011\012" +
    "\024\013\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\004\020\012" +
    "\075\013\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\014\032\015\031\016\040\017\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\014\052\015\031\016\040" +
    "\017\036\001\001\000\004\020\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\015\055\016\040\017\036\001\001\000\002\001\001" +
    "\000\006\016\057\017\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\014\062\015\031\016\040\017\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
    "\020\012\065\013\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\014\070\015\031\016\040\017\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\004\020" +
    "\012\073\013\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MPParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MPParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MPParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   public static void main( String[] args )
   {
      try
	  {
		   FileReader file = new FileReader( args[0] );
		   Scanner scanner = new MPLexer( file );
		   MPParser parser = new MPParser( scanner );
		   parser.parse();
	  }
	  catch( Exception e )
	  {
		   e.printStackTrace();
	  }
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MPParser$actions {
  private final MPParser parser;

  /** Constructor */
  CUP$MPParser$actions(MPParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MPParser$do_action(
    int                        CUP$MPParser$act_num,
    java_cup.runtime.lr_parser CUP$MPParser$parser,
    java.util.Stack            CUP$MPParser$stack,
    int                        CUP$MPParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MPParser$result;

      /* select the action based on the action number */
      switch (CUP$MPParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Term ::= LEFTPAR Expression RIGHTPAR 
            {
              Object RESULT = null;
		
              System.out.println( "35." );
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Term ::= BOOLCONST 
            {
              Object RESULT = null;
		
              System.out.println( "34." );
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Term ::= FLOATCONST 
            {
              Object RESULT = null;
		
              System.out.println( "33." );
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Term ::= CHARCONST 
            {
              Object RESULT = null;
		
              System.out.println( "32." );
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Term ::= INTCONST 
            {
              Object RESULT = null;
		
              System.out.println( "31." );
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Term ::= ID 
            {
              Object RESULT = null;
		
              System.out.println( "30." );
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // RelOp ::= GREATEROREQUAL 
            {
              Object RESULT = null;
		
             System.out.println( "29." );
          
              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // RelOp ::= GREATER 
            {
              Object RESULT = null;
		
             System.out.println( "28." );
          
              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // RelOp ::= NOTEQUAL 
            {
              Object RESULT = null;
		
             System.out.println( "27." );
          
              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // RelOp ::= EQUAL 
            {
              Object RESULT = null;
		
             System.out.println( "26." );
          
              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // RelOp ::= LOWEROREQUAL 
            {
              Object RESULT = null;
		
             System.out.println( "25." );
          
              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // RelOp ::= LOWER 
            {
              Object RESULT = null;
		
             System.out.println( "24." );
          
              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // RelExpression ::= Term 
            {
              Object RESULT = null;
		
              System.out.println( "23." );
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*RelExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // RelExpression ::= Term RelOp Term 
            {
              Object RESULT = null;
		
              System.out.println( "22." );
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*RelExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // AndExpression ::= RelExpression 
            {
              Object RESULT = null;
		
             System.out.println( "21." );
          
              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*AndExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // AndExpression ::= AndExpression AND RelExpression 
            {
              Object RESULT = null;
		
             System.out.println( "20." );
          
              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*AndExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Expression ::= AndExpression 
            {
              Object RESULT = null;
		
            System.out.println( "19." );
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Expression ::= Expression OR AndExpression 
            {
              Object RESULT = null;
		
            System.out.println( "18." );
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // RedoLoop ::= LOOP LEFTPAR Expression RIGHTPAR LEFTCURLYPAR Statement REDO LEFTPAR Expression RIGHTPAR SEMICOLON Statement LEFTCURLYPAR 
            {
              Object RESULT = null;
		
               System.out.println( "Redukcija po smeni 17." );
            
              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*RedoLoop*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-12)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Statement ::= Block 
            {
              Object RESULT = null;
		
              System.out.println( "16." );
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Statement ::= ID ASSIGN Expression SEMICOLON 
            {
              Object RESULT = null;
		
              System.out.println( "15." );
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Statement ::= RedoLoop 
            {
              Object RESULT = null;
		
              System.out.println( "14." );
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // StatementList ::= Statement 
            {
              Object RESULT = null;
		
            System.out.println( "13." );
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(4/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // StatementList ::= StatementList Statement 
            {
              Object RESULT = null;
		
            System.out.println( "12." );
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(4/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Type ::= BOOL 
            {
              Object RESULT = null;
		
           System.out.println( "11." );
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= FLOAT 
            {
              Object RESULT = null;
		
           System.out.println( "10." );
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= CHAR 
            {
              Object RESULT = null;
		
           System.out.println( "9." );
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Type ::= INT 
            {
              Object RESULT = null;
		
           System.out.println( "8." );
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NameList ::= NameList COMMA ID 
            {
              Object RESULT = null;
		
                System.out.println( "7." );
             
              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*NameList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NameList ::= ID 
            {
              Object RESULT = null;
		
                System.out.println( "6." );
             
              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*NameList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VarDecl ::= Type NameList SEMICOLON 
            {
              Object RESULT = null;
		
                   System.out.println( "5." );
                
              CUP$MPParser$result = new java_cup.runtime.Symbol(5/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Declarations ::= VarDecl 
            {
              Object RESULT = null;
		
			   System.out.println( "3.7" );
            
              CUP$MPParser$result = new java_cup.runtime.Symbol(3/*Declarations*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Declarations ::= Declarations VarDecl 
            {
              Object RESULT = null;
		
               System.out.println( "3." );
            
              CUP$MPParser$result = new java_cup.runtime.Symbol(3/*Declarations*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Block ::= LEFTCURLYPAR Declarations StatementList RIGHTCURLYPAR 
            {
              Object RESULT = null;
		
                System.out.println( "2." );
             
              CUP$MPParser$result = new java_cup.runtime.Symbol(2/*Block*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= MAIN LEFTPAR RIGHTPAR Block 
            {
              Object RESULT = null;
		
               System.out.println( "1." );
            
              CUP$MPParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		RESULT = start_val;
              CUP$MPParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MPParser$parser.done_parsing();
          return CUP$MPParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

